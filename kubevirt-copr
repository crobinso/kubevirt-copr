#!/usr/bin/env python3

import argparse
import logging
import os
import pprint
import subprocess
import sys
import time

import copr.v3
import requests


log = logging.getLogger(__name__)


# This is the list of dist-git packages in the repo
PACKAGE_NAMES = [
    "seabios",
    "libvirt",
    "qemu",
    "SLOF",
    "edk2",
]


CHROOTS = [
    "fedora-32-x86_64",
    "fedora-32-aarch64",
    "fedora-32-s390x",
    "fedora-33-x86_64",
    "fedora-33-aarch64",
    "fedora-33-s390x",
]


#####################
# Utility functions #
#####################

def delay(msg, secs):
    for sec in range(secs):
        newstr = "\r%s(%s of %s)" % (msg, sec + 1, secs)
        sys.stdout.write(newstr)
        sys.stdout.flush()
        time.sleep(1)


class Verrel:
    """
    Helper class for interacting with koji build names
    """
    def __init__(self, verrel):
        # Some versions are like XXX.fcXX.1
        # The .1 typically means a rebuild, no code change so
        # is generally not worth publishing.
        # Processing those style of versions makes a few things
        # difficult, so completely disregard them if we see them,
        # and use the plain .fcXX version instead
        suffix = verrel.split(".")[-1]
        if not suffix.startswith("fc") and not suffix.startswith("el"):
            newverrel = ".".join(verrel.split(".")[:-1])
            log.debug("Converting verrel=%s to %s", verrel, newverrel)
            verrel = newverrel

        self.full = verrel
        (self.package,
         self.version,
         self.release) = self.full.split("-", 2)

        # We used to strip out the .fc bit, but that can make it ambiguous
        # what content we are mirroring
        self.project_name = self.full

        # The QEMU source package is 'qemu' in Fedora and 'qemu-kvm' in
        # RHEL. Make things consistent by always using the former
        self.project_name = self.project_name.replace("qemu-kvm", "qemu")

    def get_srpm_url(self):
        url = "https://kojipkgs.fedoraproject.org/packages/"
        url += "%s/%s/%s/src/%s.src.rpm" % (
                self.package, self.version, self.release, self.full)
        requests.head(url).raise_for_status()
        return url

    def __repr__(self):
        return "<%s %s>" % (self.__class__.__name__, self.full)


class SRPMVerrel(Verrel):
    def __init__(self, srpmpath):
        self.srpmpath = srpmpath
        assert os.path.exists(srpmpath)
        assert srpmpath.endswith(".src.rpm")
        super().__init__(".".join(os.path.basename(srpmpath).split(".")[:-2]))

    def get_srpm_url(self):
        return self.srpmpath


################
# Copr helpers #
################

class CoprAPI:
    """
    Helper class for talking to copr API
    """
    OWNER_NAME = "@kubevirt"

    def __init__(self):
        self._client = copr.v3.Client.create_from_config_file()

    def has_repo_for_build(self, verrel):
        """
        Check if a repo exists for the passed package version,
        and that the repo has an in progress or successful build.
        Meaning, we are already up to date and there's nothing to do
        """
        proj = self._lookup_project(verrel)
        log.debug("Found proj=%s for verrel=%s", proj, verrel)
        if not proj:
            return False

        builds = self._client.build_proxy.get_list(
                ownername=self.OWNER_NAME,
                projectname=verrel.project_name)
        for build in builds:
            if build["state"] == "running":
                # Don't mess with any repo with 'running' builds
                print("Builds are still running for proj=%s" %
                        verrel.project_name)
                return True
            if build["state"] == "succeeded":
                # Treat any successful build as a match. It's
                # kinda hard to match against versions in copr because
                # it publishes the epoch in the version string
                log.debug("Found successful build for verrel=%s", verrel)
                return True

        log.debug("No build found for verrel=%s", verrel)
        return False

    def _cli_build(self, projectname, srpmurl):
        # We use the CLI here because it will wait for the build
        # to complete and give nicer reporting
        reponame = "%s/%s" % (self.OWNER_NAME, projectname)
        cmd = ["copr-cli", "build", reponame, srpmurl]

        print("\n\n+ %s" % " ".join(cmd))
        returncode = subprocess.call(cmd)
        log.debug("copr-cli returned %s", returncode)
        return bool(returncode == 0)

    def _create_project(self, verrel):
        print("Creating new copr project %s/%s\n" %
                (self.OWNER_NAME, verrel.project_name))

        self._client.project_proxy.add(
            ownername=self.OWNER_NAME,
            projectname=verrel.project_name,
            chroots=CHROOTS)

    def _lookup_project(self, verrel):
        try:
            self._client.project_proxy.get(
                    ownername=self.OWNER_NAME,
                    projectname=verrel.project_name)
        except copr.v3.exceptions.CoprNoResultException:
            return None
        return verrel.project_name

    def make_repo(self, verrel):
        """
        Make the copr project repo, and kick of a build
        """
        # Get SRPM URL
        srpmurl = verrel.get_srpm_url()
        log.debug("Using koji SRPM URL: %s", str(srpmurl))

        # Lookup the project, or create it if it doesn't exist
        projectname = self._lookup_project(verrel)
        if projectname:
            log.debug("Found existing project: %s", projectname)
        else:
            self._create_project(verrel)
            projectname = self._lookup_project(verrel)
            log.debug("Created project: %s", projectname)

        return self._cli_build(projectname, srpmurl)


####################
# Helper functions #
####################

def get_koji_latest_verrels():
    """
    Query koji for the latest verrel build for rawhide of each
        package in PACKAGE_NAMES

    :returns: dict of package_name:verrel
    """
    verrels = []
    for package_name in PACKAGE_NAMES:
        cmd = ["koji", "latest-build", "--quiet", "rawhide", package_name]
        out = subprocess.check_output(cmd, stderr=subprocess.STDOUT)

        verrelstr = out.split()[0].decode("utf-8")
        verrel = Verrel(verrelstr)
        verrels.append(verrel)

    return verrels


#########################
# Main and CLI handling #
#########################

def parse_args():
    desc = ("Helper for maintaining kubevirt copr repos."
            "https://copr.fedorainfracloud.org/groups/g/kubevirt/coprs/")
    parser = argparse.ArgumentParser(description=desc)

    parser.add_argument("-d", "--debug", action="store_true",
            help="Debug output")
    parser.add_argument("--build", metavar="VERREL", action="append",
            help="Force a build for the specified package version"
                 "Example: --build=libvirt-6.1.0-1.fc33")
    parser.add_argument("--srpm", help="Build the passed srpm")

    return parser.parse_args()


def setup_logging(debug):
    global logging
    handler = logging.StreamHandler(sys.stderr)
    handler.setFormatter(logging.Formatter(
        "[%(asctime)s] %(levelname)s (%(module)s:%(lineno)d) %(message)s",
        "%H:%M:%S"))
    log.addHandler(handler)
    log.setLevel(debug and logging.DEBUG or logging.ERROR)
    del(logging)


def build_packages(manual_builds, srpm):
    coprapi = CoprAPI()

    need_repos = []
    if srpm:
        need_repos = [SRPMVerrel(srpm)]
    elif manual_builds:
        # Manual builds requested via --build
        need_repos = [Verrel(b) for b in manual_builds]
    else:
        print("Checking koji for latest rawhide verrels...")
        koji_verrels = get_koji_latest_verrels()
        log.debug("Koji verrels:\n%s", pprint.pformat(
            [v.full for v in koji_verrels]))

        # Determine if these are new builds
        for verrel in koji_verrels:
            if not coprapi.has_repo_for_build(verrel):
                need_repos.append(verrel)

    if not need_repos:
        print("Everything is up to date, nothing to build")
        return

    need_repos.sort(key=lambda v: v.full)
    print("\nThe following packages need publishing:\n")
    for verrel in need_repos:
        print("* %s" % verrel.full)

    print()
    delay("Proceeding, ctrl-c to exit...", 5)
    print()

    failures = []
    for verrel in need_repos:
        build_success = coprapi.make_repo(verrel)
        if not build_success:
            failures.append(verrel.full)

    if failures:
        print("\n\nTHE FOLLOWING BUILDS FAILED: %s" % failures)
        return True


def main():
    options = parse_args()
    setup_logging(options.debug)

    if build_packages(options.build, options.srpm):
        return 1
    return 0


if __name__ == '__main__':
    sys.exit(main())
